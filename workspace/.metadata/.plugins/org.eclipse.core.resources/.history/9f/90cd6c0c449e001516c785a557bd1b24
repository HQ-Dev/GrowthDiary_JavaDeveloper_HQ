import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// 5-1 数组
		// 如何写出一个程序计算用户输入的数字的平均数，并输出所有大于平均数的数字？
		// 那就需要记录所有输入进来的数字，那用上面办法呢？
		// 其实现在我们要接触新的东西，就是：数组！
		
//		Scanner in = new Scanner(System.in);
//		int x;      // x 表示输入的数字
//		int [] numbers = new int[100];     // 定义了一个数组numbers，它数组数量是100,类型是int
//		double sum = 0;      // 定义了所有数字的和
//		int cnt = 0;         // 这个变量记录输入了多少个数字
//		x = in.nextInt();
//		while ( x != -1)            // 当输入－1的时候，表示告诉程序我停止输入数字了（“前面输入的数字已经够了”）
//		{
//			numbers[cnt] = x;       // cnt刚开始是0
//			sum += x;
//			cnt ++;              
//			x = in.nextInt();
//		}
//		if (cnt > 0)                 // 下面的代码就是如何输出大于平均数的输入数字
//		{
//			double average = sum/cnt;
//			System.out.println(average);       
//			for (int i = 0; i<cnt; i++)
//			{
//				if (numbers[i] > average)
//				{
//					System.out.println(numbers[i]);
//				}
//			}
//		}       // 其实上面这个代码段是有安全隐患的，就是数组个数确定为了100，如果输入的数字数量大于100个就会导致异常；
		        // 解决方法可以是数组的数量改为变量，然后后面的代码做小修改即可，另一种方法，仍然确定数组的数量，但是
		        // 可以再下面的 while() 循环条件中加上当 cnt > 99 的时候跳出循环即可
		
		
		// 5-1.2 创建数组 下面介绍数组在Java中的一些特性
		/*
		 * 是一种容器，特点是：
		 *  其中所有的元素具有相同的数据类型；
		 *  一旦创建， 不能改变大小；
		 *  即，比如 new int[100]; 之后就是确定的100个了，不能再改变大小
		 *  
		 *       定义数组变量
		 *   <类型>[]<名字> = new <类型>[元素个数];  下面是例子：
		 *   int[] grades = new int[100];
		 *   double[] averages = new double[20];
		 *   
		 *   相关要求：
		 *   元素个数必须给出
		 *   元素个数必须是整数
		 *   元素个数可以是变量     int[] numbers = new in[n];
		 *   int[100] number;   ❌ 这样是一个语法错误；
		 *   
		 */
		
		
		// 5-1.3  数组元素
		// 访问数组中的元素，是通过索引（下标）来访问的。
		/*         有效的下标
		 * ＊最小的下标是0，最大的下标是数组的元素个数－1
		 * ＊可是编译器不会检查看你是否使用了有效的下标
		 * ＊但是如果运行的时候出现了无效的下标，可能会导致程序终止
		 * 
		 * 例子：如果数组的大小是100个，你编写 int[-1] = 11; int[100] = 12;
		 * 编译器不会报错，但是运行的话，就会导致异常exception in thread 
		 * （array index out of bound）
		 * 
		 *           Length
		 *   数组中还有一个属性，就是Length, 会告诉你它的元素的数量
		 *   那么如何使用它呢，请看下面优雅的代码：
		 *   
		 *   for (int i = 0; i < 100; i++)
		 *       sum += grade[i];
		 *   最好是这样：
		 *   for (int i = 0; i < grade.length; i++) 
		 *       sum += grade[i];
		 *   (这样的方法可读性很强，看的人可以直接了解遍历什么内容，并且很重要的一点，它是具有
		 *   可扩展性的。因为有可能，将来你也许会改变数组的大小，但是这个遍历中的条件你是不需要
		 *   进行修改的。)
		 */
		
		
		
		// 5-1.4 投票统计
		// 写一个程序，输入数量不确定的范围再［0，9］之间的整数，统计每一种数字出现的次数
		// ,输入－1表示结束。
//		Scanner in = new Scanner(System.in);
//		int x;
//		int[] numbers = new int[10];
//		x = in.nextInt();
//		while ( x != -1) 
//		{
//			if ( x >= 0 && x <= 9)
//			{
//				numbers[x]++;
//			}
//			x = in.nextInt();
//		}
//		for (int i = 0; i < numbers.length; i++)
//		{
//			System.out.println(i + ":" + numbers[i]);
//		}
		
		
		// 5-2.1 数组变量
		// java语言可以直接给没有初始化的数组赋值0
		// 也可以直接初始化数组
		/*
		 * new创建的数组会得到默认的0值
		 * int[] scores = {87,90,78,90,99,79,89,89,78};    也可以直接赋值
		 * 直接用大括号给出数组的所有元素的初始值
		 * 不需要给出数组的大小，编译器会帮你数数（length）
		 */
//		Scanner in = new Scanner(System.in);
//		int[] scores = {89,88,87,78,79,90,98,86};
//		System.out.println(scores.length);
//		for (int i=0; i < scores.length; i++)
//		{
//			System.out.print(scores[i] + " ");
//		}  // 使用数组的特性 length 将会有很好的扩展性，你可以再数组中随意再添加分数
		
	   // 接下来要讲在java中
		/*
		 * 数组变量是数组的管理制而非数组本身；
		 * 数组必须创建出来然后交给数组变量来管理；
		 * 数组变量之间的赋值是管理权限的赋予；
		 * 数组变量之间的比较是判断是否管理同一个数组；
		 */
//		Scanner in = new Scanner(System.in);
//		int[] a = new int[10];
//		a[0] = 5;
//		int[] b = a;
//		System.out.println(a[0]);   // 是5
//		b[0] = 16;
//		System.out.println(a[0]);   // 结果也是16，不是5，因为它们数组变量a和b都管理
//		// 同一个数组。
		
//		int[] a = {1,2,3,4,5};
//		int[] b = {2,3,4,5,6};    
//		System.out.println(a==b);
		// 打印的结果是false，即使 int[] b = {1,2,3,4,5}; 比较两个数组变量是否相同
		// 答案还是不相同，因为即使内容是相同的，但它们管理的数组变量并不是同一个
		
		
		// 5-2.2 遍历数组
		// 在一组给定的数据中，如何找出某个数据是否存在？
		Scanner in = new Scanner(System.in);
		int[] data = {3,2,5,7,4,9,11,34,12,28};
		int x = in.nextInt();
		System.out.println("你输入的数字是："+x);
		int loc = -1;    // 这个变量用来记录找到的那个数据
		for (int i = 0; i < data.length; i++)
		{
			if (x == data[i])
			{
				loc = i;
				break;
			}
		}
		if (loc > -1) 
		{
			System.out.println(x + "是该数组中第"+ (loc + 1)+ "个数字");
		}
		else
		{
			System.out.println("该数组中没有这个数字");
		}
		
		
		
		
		// 分割线
	}

}
