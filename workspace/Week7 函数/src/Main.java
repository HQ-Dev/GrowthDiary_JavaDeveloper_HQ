import java.util.Scanner;

//public class Main {
//
//	public static void sum(int a, int b)   // 这个叫做函数头  sum 是函数名; void 是返回类型
//	{										// 大括号里的是函数体
//		int i;
//		int sum = 0;
//		for ( i = a; i<=b; i++) 
//		{
//			sum += i;
//		}
//		System.out.println(a + "到" + b + "的和是：" + sum);
//	}
//	
//	public static void main(String[] args) {
//
//		// 第七周 函数
//		// 求和
//		// 求出1到10、20到30和35到45的三个和
//		// 你可以对者三个范围分别进行遍历求和，得到结果，但是你会发现
//		// 这样出来的三段代码是很相似的
//		// 这样的情况其实是“代码复制”
//		// “代码复制”是程序不良的表现
//		// 我们需要通过函数来改进！
//		Scanner in = new Scanner(System.in);
//		sum(1, 10);
//		sum(20,30);
//		sum(35, 45);
//		
//		// 然后通过函数就会将过程变得这么简洁。
//		
//		/*         什么是函数
//		 * 函数是一块代码，接收零个或多个参数，做一件事情，
//		 * 并返回零个或一个值。
//		 * 
//		 * 
//		 */
//		//
//	}
//
//}


public class Main {
	
	public static void main(String[] args) {
		
		// 7-1.2 调用函数
		/*   函数名（参数）；
		 *   （）起到了表示函数调用的重要作用；
		 *    即使没有参数也需要（）；
		 *    如果有参数，则需要给出正确的数量和顺序；
		 *    这些值会被按照顺序依次来初始化函数中的参数；
		 * 
		 * 			从函数中返回值
		 *   return停止函数的执行，并送回一个值；
		 *     return;        （return的两种类型）
 		 *     return表达式；
		 * 
		 */
		
		
		// 7-2.1 参数传递
		/*
		 * 			调用函数
		 *   如果函数有参数，调用函数时必须传递给它数量、类型正确的值；
		 *   如果传递给函数的参数的值时表达值的结果，这包括：
		 *     字面量；
		 *     变量；
		 *     函数的返回值；
		 *     计算的结果；
		 * 
		 * 
		 * 			类型不匹配
		 *   当函数期望的参数类型比调用函数时给的值的类型宽的时候，
		 *   编译器能悄悄替你把类型转换好；
		 *   
		 *   
		 *           传过去的是什么？
		 *    public static void swap(int a, int b)
		 *    {
		 *    	int t;
		 *      t = a;
		 *      a = b;
		 *      b = t;
		 *    }
		 *    
		 *    public static void main(String[] args) {
		 *      int a = 5;
		 *      int b = 6;
		 *      swap(a,b);
		 *    }
		 *    这样 main｛｝中的a,b值并没有交换，因为在Java语言调用函数时，永远只能传值给函数。
		 *    每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系；
		 *    过去，对于函数参数表中的参数，叫做“形式参数”，调用函数时给的值，叫做“实际参数”
		 *    现在，我们认为这种叫法是有误导性的，现在我们认为，它们时参数和值的关系。
		 *    
		 *    那么应该怎么做才能交换a,b呢？
		 */
		
		
		// 7-2.2 本地变量
		/*
		 *  函数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，
		 *  是函数的这次运行所独有的，称为本地变量；
		 *  定义在函数内部的变量就是本地变量
		 *  参数也是本地变量
		 * 
		 */
		
		
	}

}
